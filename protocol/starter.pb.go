// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol/starter.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// sample request
type Question struct {
	What                 string   `protobuf:"bytes,1,opt,name=what,proto3" json:"what,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Question) Reset()         { *m = Question{} }
func (m *Question) String() string { return proto.CompactTextString(m) }
func (*Question) ProtoMessage()    {}
func (*Question) Descriptor() ([]byte, []int) {
	return fileDescriptor_00560c48cf28b826, []int{0}
}

func (m *Question) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Question.Unmarshal(m, b)
}
func (m *Question) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Question.Marshal(b, m, deterministic)
}
func (m *Question) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Question.Merge(m, src)
}
func (m *Question) XXX_Size() int {
	return xxx_messageInfo_Question.Size(m)
}
func (m *Question) XXX_DiscardUnknown() {
	xxx_messageInfo_Question.DiscardUnknown(m)
}

var xxx_messageInfo_Question proto.InternalMessageInfo

func (m *Question) GetWhat() string {
	if m != nil {
		return m.What
	}
	return ""
}

// sample response
type Answer struct {
	Answer               string   `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Answer) Reset()         { *m = Answer{} }
func (m *Answer) String() string { return proto.CompactTextString(m) }
func (*Answer) ProtoMessage()    {}
func (*Answer) Descriptor() ([]byte, []int) {
	return fileDescriptor_00560c48cf28b826, []int{1}
}

func (m *Answer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Answer.Unmarshal(m, b)
}
func (m *Answer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Answer.Marshal(b, m, deterministic)
}
func (m *Answer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Answer.Merge(m, src)
}
func (m *Answer) XXX_Size() int {
	return xxx_messageInfo_Answer.Size(m)
}
func (m *Answer) XXX_DiscardUnknown() {
	xxx_messageInfo_Answer.DiscardUnknown(m)
}

var xxx_messageInfo_Answer proto.InternalMessageInfo

func (m *Answer) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

func init() {
	proto.RegisterType((*Question)(nil), "protocol.Question")
	proto.RegisterType((*Answer)(nil), "protocol.Answer")
}

func init() {
	proto.RegisterFile("protocol/starter.proto", fileDescriptor_00560c48cf28b826)
}

var fileDescriptor_00560c48cf28b826 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x2f, 0x2e, 0x49, 0x2c, 0x2a, 0x49, 0x2d, 0xd2, 0x03, 0x0b, 0x08,
	0x71, 0xc0, 0xc4, 0x95, 0xe4, 0xb8, 0x38, 0x02, 0x4b, 0x53, 0x8b, 0x4b, 0x32, 0xf3, 0xf3, 0x84,
	0x84, 0xb8, 0x58, 0xca, 0x33, 0x12, 0x4b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c,
	0x25, 0x05, 0x2e, 0x36, 0xc7, 0xbc, 0xe2, 0xf2, 0xd4, 0x22, 0x21, 0x31, 0x2e, 0xb6, 0x44, 0x30,
	0x0b, 0x2a, 0x0f, 0xe5, 0x19, 0x39, 0x72, 0xf1, 0x42, 0x54, 0x04, 0xa7, 0x16, 0x95, 0x65, 0x26,
	0xa7, 0x0a, 0x19, 0x70, 0xb1, 0x85, 0x67, 0x24, 0x96, 0x78, 0x16, 0x0b, 0x09, 0xe9, 0xc1, 0xec,
	0xd1, 0x83, 0x59, 0x22, 0x25, 0x80, 0x10, 0x83, 0x68, 0x53, 0x62, 0x70, 0xe2, 0x8a, 0x82, 0x3b,
	0x28, 0x89, 0x0d, 0xcc, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd5, 0xee, 0xaf, 0xa4, 0xbb,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AnswerServiceClient is the client API for AnswerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnswerServiceClient interface {
	// ask a question
	WhatIs(ctx context.Context, in *Question, opts ...grpc.CallOption) (*Answer, error)
}

type answerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnswerServiceClient(cc grpc.ClientConnInterface) AnswerServiceClient {
	return &answerServiceClient{cc}
}

func (c *answerServiceClient) WhatIs(ctx context.Context, in *Question, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/protocol.AnswerService/WhatIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnswerServiceServer is the server API for AnswerService service.
type AnswerServiceServer interface {
	// ask a question
	WhatIs(context.Context, *Question) (*Answer, error)
}

// UnimplementedAnswerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAnswerServiceServer struct {
}

func (*UnimplementedAnswerServiceServer) WhatIs(ctx context.Context, req *Question) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhatIs not implemented")
}

func RegisterAnswerServiceServer(s *grpc.Server, srv AnswerServiceServer) {
	s.RegisterService(&_AnswerService_serviceDesc, srv)
}

func _AnswerService_WhatIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Question)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServiceServer).WhatIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.AnswerService/WhatIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServiceServer).WhatIs(ctx, req.(*Question))
	}
	return interceptor(ctx, in, info, handler)
}

var _AnswerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.AnswerService",
	HandlerType: (*AnswerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhatIs",
			Handler:    _AnswerService_WhatIs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/starter.proto",
}
